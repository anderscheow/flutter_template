// This file has been generated by the dart_json_mapper package.
// https://github.com/k-paxian/dart-json-mapper
// @dart = 2.12
import 'package:dart_json_mapper/dart_json_mapper.dart' show JsonMapper, JsonMapperAdapter, typeOf;
import 'src/models/language.dart' as x0 show Language;

// ignore_for_file: invalid_language_version_override
// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.
// @dart = 2.12

import 'dart:core';
import 'package:dart_json_mapper/src/model/annotations.dart' as prefix0;
import 'package:flutter_template/src/models/language.dart' as prefix1;

// ignore_for_file: prefer_adjacent_string_concatenation
// ignore_for_file: prefer_collection_literals
// ignore_for_file: unnecessary_const
// ignore_for_file: implementation_imports

// ignore:unused_import
import 'package:reflectable/mirrors.dart' as m;
// ignore:unused_import
import 'package:reflectable/src/reflectable_builder_based.dart' as r;
// ignore:unused_import
import 'package:reflectable/reflectable.dart' as r show Reflectable;

final _data = <r.Reflectable, r.ReflectorData>{const prefix0.JsonSerializable(): r.ReflectorData(<m.TypeMirror>[r.NonGenericClassMirrorImpl(r'Language', r'.Language', 7, 0, const prefix0.JsonSerializable(), const <int>[0, 1, 2, 3, 8, 9], const <int>[10, 11, 12, 13, 14, 15, 4, 5, 6, 7, 8], const <int>[], -1, {}, {}, {r'': (bool b) => (id, name, languageCode, scriptCode) => b ? prefix1.Language(id, name, languageCode, scriptCode) : null}, -1, 0, const <int>[], const [prefix0.jsonSerializable], null)], <m.DeclarationMirror>[r.VariableMirrorImpl(r'id', 33797, 0, const prefix0.JsonSerializable(), -1, 1, 1, const <int>[], const []), r.VariableMirrorImpl(r'name', 33797, 0, const prefix0.JsonSerializable(), -1, 2, 2, const <int>[], const []), r.VariableMirrorImpl(r'languageCode', 33797, 0, const prefix0.JsonSerializable(), -1, 2, 2, const <int>[], const []), r.VariableMirrorImpl(r'scriptCode', 33797, 0, const prefix0.JsonSerializable(), -1, 3, 3, const <int>[], const []), r.ImplicitGetterMirrorImpl(const prefix0.JsonSerializable(), 0, 4), r.ImplicitGetterMirrorImpl(const prefix0.JsonSerializable(), 1, 5), r.ImplicitGetterMirrorImpl(const prefix0.JsonSerializable(), 2, 6), r.ImplicitGetterMirrorImpl(const prefix0.JsonSerializable(), 3, 7), r.MethodMirrorImpl(r'props', 4325379, 0, -1, 5, 6, const <int>[4], const <int>[], const prefix0.JsonSerializable(), const [override, const prefix0.JsonProperty(ignore: true)]), r.MethodMirrorImpl(r'', 128, 0, -1, 0, 0, const <int>[], const <int>[0, 1, 2, 3], const prefix0.JsonSerializable(), const []), r.MethodMirrorImpl(r'==', 131074, -1, -1, 7, 7, const <int>[], const <int>[4], const prefix0.JsonSerializable(), const [override]), r.MethodMirrorImpl(r'toString', 131074, -1, -1, 2, 2, const <int>[], const <int>[], const prefix0.JsonSerializable(), const [override]), r.MethodMirrorImpl(r'noSuchMethod', 65538, -1, -1, -1, -1, const <int>[], const <int>[5], const prefix0.JsonSerializable(), const []), r.MethodMirrorImpl(r'hashCode', 131075, -1, -1, 1, 1, const <int>[], const <int>[], const prefix0.JsonSerializable(), const [override]), r.MethodMirrorImpl(r'runtimeType', 131075, -1, -1, 8, 8, const <int>[], const <int>[], const prefix0.JsonSerializable(), const []), r.MethodMirrorImpl(r'stringify', 131075, -1, -1, 9, 9, const <int>[], const <int>[], const prefix0.JsonSerializable(), const [])], <m.ParameterMirror>[r.ParameterMirrorImpl(r'id', 33798, 9, const prefix0.JsonSerializable(), -1, 1, 1, const <int>[], const [], null, null), r.ParameterMirrorImpl(r'name', 33798, 9, const prefix0.JsonSerializable(), -1, 2, 2, const <int>[], const [], null, null), r.ParameterMirrorImpl(r'languageCode', 33798, 9, const prefix0.JsonSerializable(), -1, 2, 2, const <int>[], const [], null, null), r.ParameterMirrorImpl(r'scriptCode', 33798, 9, const prefix0.JsonSerializable(), -1, 3, 3, const <int>[], const [], null, null), r.ParameterMirrorImpl(r'other', 32774, 10, const prefix0.JsonSerializable(), -1, 10, 10, const <int>[], const [], null, null), r.ParameterMirrorImpl(r'invocation', 32774, 12, const prefix0.JsonSerializable(), -1, 11, 11, const <int>[], const [], null, null)], <Type>[prefix1.Language, int, String, String, Object, const m.TypeValue<List>().type, List, bool, Type, bool, Object, Invocation], 1, {r'==': (dynamic instance) => (x) => instance == x, r'toString': (dynamic instance) => instance.toString, r'noSuchMethod': (dynamic instance) => instance.noSuchMethod, r'hashCode': (dynamic instance) => instance.hashCode, r'runtimeType': (dynamic instance) => instance.runtimeType, r'stringify': (dynamic instance) => instance.stringify, r'id': (dynamic instance) => instance.id, r'name': (dynamic instance) => instance.name, r'languageCode': (dynamic instance) => instance.languageCode, r'scriptCode': (dynamic instance) => instance.scriptCode, r'props': (dynamic instance) => instance.props}, {}, null, [])};


final _memberSymbolMap = null;

void _initializeReflectable(JsonMapperAdapter adapter) {
  if (adapter.reflectableData == null) {
    return;
  }
  r.data = adapter.reflectableData!;
  r.memberSymbolMap = adapter.memberSymbolMap;
}

final mainprodAdapter = JsonMapperAdapter(
  title: 'main_prodAdapter',
  url: 'package:flutter_template/main_prod.dart',
  reflectableData: _data,
  memberSymbolMap: _memberSymbolMap,
  valueDecorators: {
    typeOf<List<x0.Language>>(): (value) => value.cast<x0.Language>(),
    typeOf<Set<x0.Language>>(): (value) => value.cast<x0.Language>()
},
  enumValues: {

});

Future<JsonMapper> initializeJsonMapperAsync({Iterable<JsonMapperAdapter> adapters = const []}) => Future(() => initializeJsonMapper(adapters: adapters));

JsonMapper initializeJsonMapper({Iterable<JsonMapperAdapter> adapters = const []}) {
  final allAdapters = [...adapters, mainprodAdapter];
  final reflectableAdapters =
      allAdapters.where((adapter) => adapter.reflectableData != null);
  final otherAdapters =
      allAdapters.where((adapter) => adapter.reflectableData == null);  
  for (var adapter in [...reflectableAdapters, ...otherAdapters]) {
    _initializeReflectable(adapter);
    JsonMapper().useAdapter(adapter);
  }
  return JsonMapper();
}